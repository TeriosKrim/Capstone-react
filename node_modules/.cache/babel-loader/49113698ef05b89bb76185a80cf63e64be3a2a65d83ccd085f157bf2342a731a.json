{"ast":null,"code":"var _jsxFileName = \"/Users/terioskrim/Documents/GitHub/Capstone-react/src/Tier/DraggableItem.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\n// Hook to make an item draggable\nimport { useDrag } from \"react-dnd\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ItemTypes = {\n  ITEM: \"item\" // Define the type for the draggable item\n};\nconst DraggableItem = ({\n  item\n}) => {\n  _s();\n  const [{\n    isDragging\n  }, drag] = useDrag({\n    type: ItemTypes.ITEM,\n    // Specify the type of the item\n    item: {\n      id: item.id\n    },\n    // Data to pass to the drop target\n    collect: monitor => ({\n      isDragging: monitor.isDragging() // Monitor the drag state\n    })\n  });\n  return /*#__PURE__*/_jsxDEV(\"img\", {\n    ref: drag // Attach the drag behavior to this\n    ,\n    src: item.image // Image of the character\n    ,\n    style: {\n      opacity: isDragging ? 0.5 : 1,\n      // Adjust opacity while dragging\n      width: \"50px\",\n      // Set image dimensions\n      height: \"50px\",\n      margin: \"2px\",\n      // Space between items\n      cursor: \"move\" // Change cursor to indicate drag action\n    },\n    alt: item.name\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 9\n  }, this);\n};\n_s(DraggableItem, \"wuumsFp4qAni9XRJfRhQAZjuD/k=\", false, function () {\n  return [useDrag];\n});\n_c = DraggableItem;\nexport default DraggableItem;\nvar _c;\n$RefreshReg$(_c, \"DraggableItem\");","map":{"version":3,"names":["React","useDrag","jsxDEV","_jsxDEV","ItemTypes","ITEM","DraggableItem","item","_s","isDragging","drag","type","id","collect","monitor","ref","src","image","style","opacity","width","height","margin","cursor","alt","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/terioskrim/Documents/GitHub/Capstone-react/src/Tier/DraggableItem.js"],"sourcesContent":["import React from \"react\";\n// Hook to make an item draggable\nimport { useDrag } from \"react-dnd\";\n\nconst ItemTypes = {\n    ITEM: \"item\", // Define the type for the draggable item\n};\n\nconst DraggableItem = ({ item }) => {\n    const [{ isDragging }, drag] = useDrag({\n        type: ItemTypes.ITEM, // Specify the type of the item\n        item: { id: item.id }, // Data to pass to the drop target\n        collect: (monitor) => ({\n            isDragging: monitor.isDragging(), // Monitor the drag state\n        }),\n    });\n\n    return (\n        <img\n            ref={drag} // Attach the drag behavior to this\n            src={item.image} // Image of the character\n            style={{\n                opacity: isDragging ? 0.5 : 1, // Adjust opacity while dragging\n                width: \"50px\", // Set image dimensions\n                height: \"50px\",\n                margin: \"2px\", // Space between items\n                cursor: \"move\", // Change cursor to indicate drag action\n            }}\n            alt={item.name}\n        />\n    );\n};\n\nexport default DraggableItem;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB;AACA,SAASC,OAAO,QAAQ,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,SAAS,GAAG;EACdC,IAAI,EAAE,MAAM,CAAE;AAClB,CAAC;AAED,MAAMC,aAAa,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EAChC,MAAM,CAAC;IAAEC;EAAW,CAAC,EAAEC,IAAI,CAAC,GAAGT,OAAO,CAAC;IACnCU,IAAI,EAAEP,SAAS,CAACC,IAAI;IAAE;IACtBE,IAAI,EAAE;MAAEK,EAAE,EAAEL,IAAI,CAACK;IAAG,CAAC;IAAE;IACvBC,OAAO,EAAGC,OAAO,KAAM;MACnBL,UAAU,EAAEK,OAAO,CAACL,UAAU,CAAC,CAAC,CAAE;IACtC,CAAC;EACL,CAAC,CAAC;EAEF,oBACIN,OAAA;IACIY,GAAG,EAAEL,IAAK,CAAC;IAAA;IACXM,GAAG,EAAET,IAAI,CAACU,KAAM,CAAC;IAAA;IACjBC,KAAK,EAAE;MACHC,OAAO,EAAEV,UAAU,GAAG,GAAG,GAAG,CAAC;MAAE;MAC/BW,KAAK,EAAE,MAAM;MAAE;MACfC,MAAM,EAAE,MAAM;MACdC,MAAM,EAAE,KAAK;MAAE;MACfC,MAAM,EAAE,MAAM,CAAE;IACpB,CAAE;IACFC,GAAG,EAAEjB,IAAI,CAACkB;EAAK;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClB,CAAC;AAEV,CAAC;AAACrB,EAAA,CAvBIF,aAAa;EAAA,QACgBL,OAAO;AAAA;AAAA6B,EAAA,GADpCxB,aAAa;AAyBnB,eAAeA,aAAa;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}